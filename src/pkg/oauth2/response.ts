export type CodeResponseParams = {
  type: "code";

  /**
   * The authorization code generated by the
   * authorization server.  The authorization code MUST expire
   * shortly after it is issued to mitigate the risk of leaks. A
   * maximum authorization code lifetime of 10 minutes is
   * RECOMMENDED. The client MUST NOT use the authorization code
   * more than once.  If an authorization code is used more than
   * once, the authorization server MUST deny the request and SHOULD
   * revoke (when possible) all tokens previously issued based on
   * that authorization code.  The authorization code is bound to
   * the client identifier and redirection URI.
   */
  code: string;

  /**
   * REQUIRED if the "state" parameter was present in the client
   * authorization request.  The exact value received from the
   * client.
   */
  state: string;
};

/**
 * The authorization server issues an access token and optional refresh
 * token, and constructs the response by adding the following parameters
 * to the entity-body of the HTTP response with a 200 (OK) status code:
 * @see https://datatracker.ietf.org/doc/html/rfc6749#section-5.1
 */
export type AccessTokenResponseParams = {
  type: "token";

  // The type of the token issued
  token_type: "bearer";

  // The access token issued by the authorization server.
  access_token: string;

  // The lifetime in seconds of the access token.  For
  // example, the value "3600" denotes that the access token will
  // expire in one hour from the time the response was generated.
  // If omitted, the authorization server SHOULD provide the
  // expiration time via other means or document the default value
  expires_in: number;

  // The refresh token, which can be used to obtain new
  // access tokens using the same authorization grant
  refresh_token?: string;

  // The lifetime in seconds of the refresh token.
  refresh_token_expires_in?: number;

  // OPTIONAL, if identical to the scope requested by the client;
  // otherwise, REQUIRED.
  scope?: string;
};

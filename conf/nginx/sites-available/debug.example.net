upstream backend {
    server 127.0.0.1:9000;
}

upstream auth_backend {
    server 127.0.0.1:8000;
}

upstream dev_frontend {
    server 127.0.0.1:3000;
}

server {
    listen      80;
    listen      [::]:80;
    server_name .example.net;

    location / {
        return 301 https://$host$request_uri;
    }
}


server {
    listen      443 ssl http2;
    listen      [::]:443 ssl http2;
    
    server_name *.example.net;

    # root        /var/api/public/build;

    # TLS
    include example.net/self-signed.conf;
    include example.net/tls-params.conf;
    
    # security headers
    include example.net/security.conf;

    location = /sign-in {
        if ($request_method !~ ^(GET|POST)$) {
            return '405';
        }
        proxy_pass http://backend/sign-in;
        include    example.net/proxy.conf;
    }

    location = /invite {
        if ($arg_code = "") {
            return 302 $scheme://$host/sign-in?error=invalid_invitation_code;
        }

        if ($request_method !~ ^(GET|POST)$) {
            return 302 $scheme://$host/sign-in?error=invalid_action;
        }
        
        proxy_pass http://backend/invite/;
        include    example.net/proxy.conf;
    }

    location = /invite/fail {
        if ($request_method != "GET") {
            return 302 $scheme://$host/sign-in?error=invalid_action;
        }

        proxy_pass http://backend/invite/fail;
        include    example.net/proxy.conf;
    }

    location = /validate_cookie {
        internal; # prevent external clients from accessing it directly
        
        proxy_pass http://auth_backend/validate_cookie;
        include    example.net/proxy.conf;

        # todo:
        # look into caching solution for session
        # https://www.nginx.com/blog/validating-oauth-2-0-access-tokens-nginx/

        proxy_set_header Host $http_host;
        
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }

    location = /validate_bearer {
        internal; # prevent external clients from accessing it directly

        proxy_pass http://auth_backend/validate_bearer;
        include    example.net/proxy.conf;

        # todo:
        # look into caching solution for tokens
        # https://www.nginx.com/blog/validating-oauth-2-0-access-tokens-nginx/
        
        # be sure to pass the original host header
        proxy_set_header Host $http_host;

        # Vouch Proxy only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }

    location /oauth2/ {
        proxy_pass http://backend;
        include    example.net/proxy.conf;
    }

    # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        return 302 https://$host/login?url=$scheme://$host$request_uri&error=$auth_resp_auth_error;
    }

    # reverse proxy
    location /api/ {
        # restrict methods
        if ($request_method !~ ^(GET|POST|PUT|DELETE|OPTIONS)$) {
            return '405';
        }
        
        # !!!
        # when authorization is working remove comments
        #auth_request /validate_bearer;
        #auth_request_set $auth_resp_auth_identity $upstream_http_x_auth_identity;
        #auth_request_set $auth_resp_auth_error $upstream_http_x_auth_error;

        #proxy_set_header X-Auth-Identity $auth_resp_auth_identity;

        proxy_pass http://backend;
        include    example.net/proxy.conf;
    }
    
    # Reverse proxy to react app dev server
    location ^~ / {
        auth_request /validate_cookie;
        auth_request_set $auth_resp_auth_identity $upstream_http_x_auth_identity;
        auth_request_set $auth_resp_auth_error $upstream_http_x_auth_error;
        
        proxy_pass http://dev_frontend;
        include    example.net/proxy.conf;
    }
    
    #include example.net/general.conf;    
}